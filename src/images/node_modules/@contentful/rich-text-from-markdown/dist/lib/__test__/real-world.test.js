"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var rich_text_types_1 = require("@contentful/rich-text-types");
var helpers_1 = require("./helpers");
var __1 = require("..");
var fs_1 = require("fs");
var path_1 = __importDefault(require("path"));
describe('rich-text-from-markdown', function () {
    it('should parse md with all formatting options', function () { return __awaiter(_this, void 0, void 0, function () {
        var md, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    md = fs_1.readFileSync(path_1.default.resolve(__dirname, './real-world.md'), 'utf8');
                    return [4 /*yield*/, __1.richTextFromMarkdown(md)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual(helpers_1.document({}, helpers_1.block(rich_text_types_1.BLOCKS.HEADING_1, {}, helpers_1.text('h1 Heading')), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_2, {}, helpers_1.text('h2 Heading')), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_3, {}, helpers_1.text('h3 Heading')), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_4, {}, helpers_1.text('h4 Heading')), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_5, {}, helpers_1.text('h5 Heading')), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_6, {}, helpers_1.text('h6 Heading')), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_2, {}, helpers_1.text('Horizontal Rules')), helpers_1.block(rich_text_types_1.BLOCKS.HR), helpers_1.block(rich_text_types_1.BLOCKS.HR), helpers_1.block(rich_text_types_1.BLOCKS.HR), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_2, {}, helpers_1.text('Emphasis')), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('This is bold text', helpers_1.mark('bold'))), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('This is bold text', helpers_1.mark('bold'))), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('This is italic text', helpers_1.mark('italic'))), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('This is italic text', helpers_1.mark('italic'))), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Strikethrough is not supported')), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_2, {}, helpers_1.text('Blockquotes')), helpers_1.block(rich_text_types_1.BLOCKS.QUOTE, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Blockquotes'))), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_2, {}, helpers_1.text('Lists')), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Unordered')), helpers_1.block(rich_text_types_1.BLOCKS.UL_LIST, {}, helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Create a list by starting a line with '), helpers_1.text('+', helpers_1.mark(rich_text_types_1.MARKS.CODE)), helpers_1.text(', '), helpers_1.text('-', helpers_1.mark(rich_text_types_1.MARKS.CODE)), helpers_1.text(', or '), helpers_1.text('*', helpers_1.mark(rich_text_types_1.MARKS.CODE)))), helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Sub-lists are made by indenting 2 spaces:')), helpers_1.block(rich_text_types_1.BLOCKS.UL_LIST, {}, helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Marker character change forces new list start:')), helpers_1.block(rich_text_types_1.BLOCKS.UL_LIST, {}, helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Ac tristique libero volutpat at')))), helpers_1.block(rich_text_types_1.BLOCKS.UL_LIST, {}, helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Facilisis in pretium nisl aliquet')))), helpers_1.block(rich_text_types_1.BLOCKS.UL_LIST, {}, helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Nulla volutpat aliquam velit'))))))), helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Very easy!')))), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Ordered')), helpers_1.block(rich_text_types_1.BLOCKS.OL_LIST, {}, helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Lorem ipsum dolor sit amet'))), helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Consectetur adipiscing elit'))), helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Integer molestie lorem at massa'))), helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('You can use sequential numbers...'))), helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('...or keep all the numbers as '), helpers_1.text('1.', helpers_1.mark(rich_text_types_1.MARKS.CODE))))), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Start numbering with offset:')), helpers_1.block(rich_text_types_1.BLOCKS.OL_LIST, {}, helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('foo'))), helpers_1.block(rich_text_types_1.BLOCKS.LIST_ITEM, {}, helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('bar')))), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_2, {}, helpers_1.text('Code')), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.text('Inline '), helpers_1.text('code', helpers_1.mark('code'))), helpers_1.block(rich_text_types_1.BLOCKS.HEADING_2, {}, helpers_1.text('Links')), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.inline(rich_text_types_1.INLINES.HYPERLINK, { data: { uri: 'https://www.contentful.com' } }, helpers_1.text('link text'))), helpers_1.block(rich_text_types_1.BLOCKS.PARAGRAPH, {}, helpers_1.inline(rich_text_types_1.INLINES.HYPERLINK, { data: { uri: 'https://www.contentful.com/blog/' } }, helpers_1.text('link with title')))));
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=real-world.test.js.map