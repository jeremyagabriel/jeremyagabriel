"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.conditionallyIncludePlugin = void 0;
const chalk_1 = __importDefault(require("chalk"));
const get_1 = __importDefault(require("lodash/get"));
/**
 *
 * @export
 * @param {string} id
 * @returns {string}
 */
function conditionallyIncludePlugin({ resolve, options = {}, theme = '', requiredOptions = [], previewable = true, enabled: isEnabled = true, }) {
    const isPreviewEnvironment = process.env.PREVIEW === 'true';
    const missingOptions = requiredOptions
        .map((requiredOption) => typeof requiredOption === 'string'
        ? [requiredOption, get_1.default(options, requiredOption)]
        : Object.entries(requiredOption)[0])
        .filter((requiredOption) => requiredOption[1] === undefined)
        .map((requiredOption) => requiredOption[0])
        .join(', ');
    if (isEnabled && !missingOptions && (!isPreviewEnvironment || previewable)) {
        return [{ options, resolve }];
    }
    const getTrueFalse = (value) => value ? chalk_1.default `{bold {green true}}` : chalk_1.default `{bold {red false}}`;
    console.warn(chalk_1.default `{bold {magenta ${resolve}}} not included:`);
    console.warn(chalk_1.default `  {bold •} theme: ${theme && chalk_1.default `{bold {cyan ${theme}}}`}`);
    console.warn(chalk_1.default `  {bold •} enabled: ${getTrueFalse(isEnabled)}`);
    console.warn(chalk_1.default `  {bold •} missing option(s): {bold ${missingOptions}}`);
    console.warn(chalk_1.default `  {bold •} can preview: ${getTrueFalse(previewable)}`);
    return [];
}
exports.conditionallyIncludePlugin = conditionallyIncludePlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWxseS1pbmNsdWRlLXBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29uZGl0aW9uYWxseS1pbmNsdWRlLXBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBMEI7QUFDMUIscURBQTZCO0FBRTdCOzs7OztHQUtHO0FBQ0gsU0FBZ0IsMEJBQTBCLENBQUMsRUFDekMsT0FBTyxFQUNQLE9BQU8sR0FBRyxFQUFFLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDVixlQUFlLEdBQUcsRUFBRSxFQUNwQixXQUFXLEdBQUcsSUFBSSxFQUNsQixPQUFPLEVBQUUsU0FBUyxHQUFHLElBQUksR0FDVztJQUNwQyxNQUFNLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQztJQUM1RCxNQUFNLGNBQWMsR0FBRyxlQUFlO1NBQ25DLEdBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQ3RCLE9BQU8sY0FBYyxLQUFLLFFBQVE7UUFDaEMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLGFBQUcsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3RDO1NBQ0EsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDO1NBQzNELEdBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVkLElBQUksU0FBUyxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsSUFBSSxXQUFXLENBQUMsRUFBRTtRQUMxRSxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztLQUMvQjtJQUVELE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBYyxFQUFFLEVBQUUsQ0FDdEMsS0FBSyxDQUFDLENBQUMsQ0FBQyxlQUFLLENBQUEscUJBQXFCLENBQUMsQ0FBQyxDQUFDLGVBQUssQ0FBQSxvQkFBb0IsQ0FBQztJQUVqRSxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQUssQ0FBQSxrQkFBa0IsT0FBTyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9ELE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBSyxDQUFBLHFCQUFxQixLQUFLLElBQUksZUFBSyxDQUFBLGVBQWUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2pGLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBSyxDQUFBLHVCQUF1QixZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBSyxDQUFBLHVDQUF1QyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQzVFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBSyxDQUFBLDJCQUEyQixZQUFZLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTFFLE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQztBQWpDRCxnRUFpQ0MifQ==