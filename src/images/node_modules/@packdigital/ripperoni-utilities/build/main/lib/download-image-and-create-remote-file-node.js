"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadImageAndCreateRemoteFileNode = void 0;
const format_message_1 = require("./format-message");
/**
 * Downloads an image and creates a remote file node in Gatsby's data layer.
 *
 * @export
 * @param {NodeInput} node
 * @param {NodePluginArgs} helpers
 * @param {string} prefix
 * @returns {Promise<NodeInput>}
 */
async function downloadImageAndCreateRemoteFileNode(node, helpers, createRemoteFileNode, prefix) {
    try {
        const { actions: { createNode, touchNode }, createNodeId, store, cache, reporter, } = helpers;
        const imageDataCacheKey = `${prefix}__IMAGE__${node.src}`;
        const cachedRemoteData = await cache.get(imageDataCacheKey);
        const createAndCacheRemoteFileNode = async () => {
            const fileNode = await createRemoteFileNode({
                cache,
                createNode,
                createNodeId,
                parentNodeId: node.id,
                reporter,
                store,
                url: node.src,
            });
            const { fileNodeID } = await cache.set(imageDataCacheKey, { fileNodeID: fileNode.id });
            // tslint:disable-next-line: no-expression-statement
            node.localFile___NODE = fileNodeID;
            return node;
        };
        return cachedRemoteData
            ? touchNode({ nodeId: cachedRemoteData.fileNodeID })
            : await createAndCacheRemoteFileNode();
    }
    catch (error) {
        const message = `Error downloading image and creating remote file node: ${error}`;
        const asFormattedMessage = format_message_1.formatMessage();
        console.log(asFormattedMessage(message, 'red'));
        console.log(`node:\n${node}`);
        return;
    }
}
exports.downloadImageAndCreateRemoteFileNode = downloadImageAndCreateRemoteFileNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtaW1hZ2UtYW5kLWNyZWF0ZS1yZW1vdGUtZmlsZS1ub2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9kb3dubG9hZC1pbWFnZS1hbmQtY3JlYXRlLXJlbW90ZS1maWxlLW5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEscURBQWlEO0FBRWpEOzs7Ozs7OztHQVFHO0FBQ0ksS0FBSyxVQUFVLG9DQUFvQyxDQUN4RCxJQUFvQixFQUNwQixPQUE0QixFQUM1QixvQkFBK0QsRUFDL0QsTUFBYztJQUVkLElBQUk7UUFDRixNQUFNLEVBQ0osT0FBTyxFQUFFLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxFQUNsQyxZQUFZLEVBQ1osS0FBSyxFQUNMLEtBQUssRUFDTCxRQUFRLEdBQ1QsR0FBRyxPQUFPLENBQUM7UUFFWixNQUFNLGlCQUFpQixHQUFHLEdBQUcsTUFBTSxZQUFZLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVELE1BQU0sNEJBQTRCLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDOUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQztnQkFDMUMsS0FBSztnQkFDTCxVQUFVO2dCQUNWLFlBQVk7Z0JBQ1osWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNyQixRQUFRO2dCQUNSLEtBQUs7Z0JBQ0wsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2FBQ2QsQ0FBQyxDQUFDO1lBRUgsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUV2RixvREFBb0Q7WUFDcEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FBQztZQUVuQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQztRQUVGLE9BQU8sZ0JBQWdCO1lBQ3JCLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDcEQsQ0FBQyxDQUFDLE1BQU0sNEJBQTRCLEVBQUUsQ0FBQztLQUMxQztJQUFDLE9BQU8sS0FBSyxFQUFFO1FBRWQsTUFBTSxPQUFPLEdBQUcsMERBQTBELEtBQUssRUFBRSxDQUFDO1FBQ2xGLE1BQU0sa0JBQWtCLEdBQUcsOEJBQWEsRUFBRSxDQUFDO1FBRTNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7UUFFOUIsT0FBTztLQUNSO0FBQ0gsQ0FBQztBQWpERCxvRkFpREMifQ==