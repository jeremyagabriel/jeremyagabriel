import { formatMessage } from './format-message';
/**
 * Downloads an image and creates a remote file node in Gatsby's data layer.
 *
 * @export
 * @param {NodeInput} node
 * @param {NodePluginArgs} helpers
 * @param {string} prefix
 * @returns {Promise<NodeInput>}
 */
export async function downloadImageAndCreateRemoteFileNode(node, helpers, createRemoteFileNode, prefix) {
    try {
        const { actions: { createNode, touchNode }, createNodeId, store, cache, reporter, } = helpers;
        const imageDataCacheKey = `${prefix}__IMAGE__${node.src}`;
        const cachedRemoteData = await cache.get(imageDataCacheKey);
        const createAndCacheRemoteFileNode = async () => {
            const fileNode = await createRemoteFileNode({
                cache,
                createNode,
                createNodeId,
                parentNodeId: node.id,
                reporter,
                store,
                url: node.src,
            });
            const { fileNodeID } = await cache.set(imageDataCacheKey, { fileNodeID: fileNode.id });
            // tslint:disable-next-line: no-expression-statement
            node.localFile___NODE = fileNodeID;
            return node;
        };
        return cachedRemoteData
            ? touchNode({ nodeId: cachedRemoteData.fileNodeID })
            : await createAndCacheRemoteFileNode();
    }
    catch (error) {
        const message = `Error downloading image and creating remote file node: ${error}`;
        const asFormattedMessage = formatMessage();
        console.log(asFormattedMessage(message, 'red'));
        console.log(`node:\n${node}`);
        return;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtaW1hZ2UtYW5kLWNyZWF0ZS1yZW1vdGUtZmlsZS1ub2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9kb3dubG9hZC1pbWFnZS1hbmQtY3JlYXRlLXJlbW90ZS1maWxlLW5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxvQ0FBb0MsQ0FDeEQsSUFBb0IsRUFDcEIsT0FBNEIsRUFDNUIsb0JBQStELEVBQy9ELE1BQWM7SUFFZCxJQUFJO1FBQ0YsTUFBTSxFQUNKLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFDbEMsWUFBWSxFQUNaLEtBQUssRUFDTCxLQUFLLEVBQ0wsUUFBUSxHQUNULEdBQUcsT0FBTyxDQUFDO1FBRVosTUFBTSxpQkFBaUIsR0FBRyxHQUFHLE1BQU0sWUFBWSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM1RCxNQUFNLDRCQUE0QixHQUFHLEtBQUssSUFBSSxFQUFFO1lBQzlDLE1BQU0sUUFBUSxHQUFHLE1BQU0sb0JBQW9CLENBQUM7Z0JBQzFDLEtBQUs7Z0JBQ0wsVUFBVTtnQkFDVixZQUFZO2dCQUNaLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDckIsUUFBUTtnQkFDUixLQUFLO2dCQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRzthQUNkLENBQUMsQ0FBQztZQUVILE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFdkYsb0RBQW9EO1lBQ3BELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUM7WUFFbkMsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7UUFFRixPQUFPLGdCQUFnQjtZQUNyQixDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BELENBQUMsQ0FBQyxNQUFNLDRCQUE0QixFQUFFLENBQUM7S0FDMUM7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUVkLE1BQU0sT0FBTyxHQUFHLDBEQUEwRCxLQUFLLEVBQUUsQ0FBQztRQUNsRixNQUFNLGtCQUFrQixHQUFHLGFBQWEsRUFBRSxDQUFDO1FBRTNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7UUFFOUIsT0FBTztLQUNSO0FBQ0gsQ0FBQyJ9